# The bot token
#   You can directly set the bot token as value or use token from env
#   To use token from env set the value like this:
#     token: env:TOKEN
token: env:TOKEN

# Commands Config
commands:
  contextMenuCommand:
    # If false, the client will ignore this type of command when executed
    enabled: true
    # Enable user command cooldowns if available
    enableCooldown: true
    # Command register config
    registerCommands:
      # Allow commands to be registered globally
      registerGlobally: true
      # Allow commands to be registered a given guilds/servers
      registerToGuilds: []
    # If enabled, the client will accept replied interactions of this type
    acceptRepliedInteractions: false
  slashCommand:
    # If false, the client will ignore this type of command when executed
    enabled: true
    # Enable user command cooldowns if available
    enableCooldown: true
    # Command register config
    registerCommands:
      # Allow commands to be registered globally
      registerGlobally: true
      # Allow commands to be registered a given guilds/servers
      registerToGuilds: []
    # If enabled, the client will accept replied interactions of this type
    acceptRepliedInteractions: false
  additionalApplicationCommands:
    # Command register config
    registerCommands:
      # Allow commands to be registered globally
      registerGlobally: true
      # Allow commands to be registered a given guilds/servers
      registerToGuilds: []
  messageCommand:
    # If false, the client will ignore this type of command when executed
    enabled: true
    # Enable user command cooldowns if available
    enableCooldown: true
    # String separator for command options
    commandArgumentSeparator: ' '
    # Command prefix
    prefix: '!'

# Application commands register config
applicationCommandRegister:
  # If false, any application commands will not be registered
  enabled: true
  # Wether allow all application commands to be registered globally
  #   This ignores their specific configs
  allowRegisterGlobally: true
  # Wether allow all application commands to be registered to guilds
  #   This ignores their specific configs
  allowRegisterToGuilds: true
  # Register empty command list
  registerEmptyCommands: true
  # Register all application commands to guilds/servers
  registerToGuilds: []

# Logger config
logger:
  # Enables client logger
  enabled: true
  # Enables logger debug mode
  debugmode: false
  # Enables colored console logs
  coloredMessages: true
  # File file config
  logToFile:
    # Enables log file
    enabled: true
    # Sets the log file folder
    logsFolder: ./logs
    # Latest log file name
    file: latest.log

# Modules config
modules:
  # Reciple modules folders
  #   You can add multiple folders by adding the folder path or using glob patterns
  modulesFolders:
    - ./modules
    - ./modules/test
  # Excluded files or folders
  #   You can add the file/folder name or use glob patterns
  exclude: []
  # If false, the client will still load unsupported modules
  disableModuleVersionCheck: false

# Cooldown sweeper
cooldownSweeper:
  # Enables cooldown sweeper
  enabled: true
  # Run sweeper every given milleseconds
  interval: 3600000

# Discord.js client options
client:
  intents:
    - Guilds
    - GuildMessages
    - MessageContent

# Don't change this value
version: ^7.5.4
